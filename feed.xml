<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ekimluo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ekimluo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-15T14:24:20+00:00</updated><id>https://ekimluo.github.io/feed.xml</id><title type="html">blank</title><subtitle>PhD in Experimental Psychology at the University of Cambridge </subtitle><entry><title type="html">An overview of how to build a free website hosted by Github pages</title><link href="https://ekimluo.github.io/blog/2024/build-a-website/" rel="alternate" type="text/html" title="An overview of how to build a free website hosted by Github pages"/><published>2024-04-15T00:00:00+00:00</published><updated>2024-04-15T00:00:00+00:00</updated><id>https://ekimluo.github.io/blog/2024/build-a-website</id><content type="html" xml:base="https://ekimluo.github.io/blog/2024/build-a-website/"><![CDATA[<h3 id="basics">Basics</h3> <p>I’m assuming a basic working knowledge of using <code class="language-plaintext highlighter-rouge">git</code> and Github. This short guide provides the general big-picture steps you should take to building your own website hosted by <a href="https://jekyllrb.com/docs/github-pages/">Github Pages</a>.</p> <p>A website hosted by Github Pages typically uses <a href="https://jekyllrb.com/">jekyll</a>, a static site generator that is ideal for blogs and portfolio sites (like this one). Once deployed, your website should be in the default <code class="language-plaintext highlighter-rouge">&lt;your-domain-name&gt;.github.io</code> URL format.</p> <p>I used the <a href="https://github.com/alshedivat/al-folio">al-folio</a> template, which is a very popular one for academics. This theme also has great documentation and set-up instructions, so I recommend it. <strong>This article is based on using the al-folio</strong> theme. You can check out the <a href="https://jekyllthemes.io/free">thousands of free Jekyll themes</a> if you want. Each theme has a slightly different configuration, so make sure to follow the setup instructions provided by the theme creator. However the general steps should be similar if not identical to the ones outlines below.</p> <h4 id="what-is-required">What is required</h4> <h5 id="linux">Linux</h5> <p>I’m using Ubuntu 22.04.4 Jammy Jellyfish. Setting up the site via command line is relatively easy and straightforward <em>if you already have working knowledge of <code class="language-plaintext highlighter-rouge">git</code></em>.</p> <p>If you don’t already have <code class="language-plaintext highlighter-rouge">git</code> installed, <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">do that first</a>. If you are also using a Debian-based distro, run the following:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>git-all
git <span class="nt">--version</span>
</code></pre></div></div> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Obviously, you need to install <code class="language-plaintext highlighter-rouge">git</code> and have a Github account.</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/><a href="https://www.ruby-lang.org/en/documentation/installation/">Install Ruby</a>. Note that your ruby version shouldn’t be too old. I’m using <code class="language-plaintext highlighter-rouge">ruby 3.2.2</code>. For Debian-based distributions, run:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>ruby-full
ruby <span class="nt">-v</span>
</code></pre></div></div> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>You also need to install <code class="language-plaintext highlighter-rouge">bundler</code>. This is the Ruby gem manager, and you will need it to install all the gems required for your site. I’m using Bunder version 2.5.8. In command line, run:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>bundler
bundle <span class="nt">-v</span>
</code></pre></div></div> <h5 id="windows">Windows</h5> <p>Follow <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">this article</a> to install <code class="language-plaintext highlighter-rouge">git</code> on Windows. I use <a href="https://gitforwindows.org/"><code class="language-plaintext highlighter-rouge">git bash</code></a> to manage everything via command line, though you can do this in whatever terminal of your choice. I installed ruby via command line too, but I’m sure you can download the latest version online.</p> <h3 id="basics-steps-of-setting-it-up-using-a-template">Basics steps of setting it up using a template</h3> <ol> <li>Create a remote repository using the <code class="language-plaintext highlighter-rouge">al-folio</code> theme. Follow the <a href="https://github.com/alshedivat/al-folio/blob/master/INSTALL.md#installing-and-deploying">setup instructions</a> on how to do this.</li> <li>Clone the repository to your local machine.</li> <li>Run <code class="language-plaintext highlighter-rouge">bundle install</code> to install the necessary gems.</li> <li>Run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> to serve the site locally.</li> <li><a href="https://github.com/alshedivat/al-folio/blob/master/CUSTOMIZE.md">Customize the repository</a> locally. Note that changes aren’t reflected until you refresh the page. If you update the <code class="language-plaintext highlighter-rouge">_config.yml</code> file, you will need to restart the server.</li> <li>Push changes to the remote repository.</li> <li>The site should be live at <code class="language-plaintext highlighter-rouge">&lt;your-domain-name&gt;.github.io</code>. It usually takes a few minutes for the changes to be reflected.</li> <li>Help Google index your site. Submit a sitemap to Google. The sitemap file should be located in the <code class="language-plaintext highlighter-rouge">_site</code> folder and called <code class="language-plaintext highlighter-rouge">site.xml</code>. The <code class="language-plaintext highlighter-rouge">url</code> format should be <code class="language-plaintext highlighter-rouge">&lt;your-domain&gt;.github.io/site.xml</code>.</li> <li><a href="https://support.google.com/webmasters/answer/9008080?hl=en">Claim your site in Google Search Console</a>. This will help you track the performance of your site in Google Search results.</li> </ol> <h3 id="tips">Tips</h3> <ul> <li>Read the instructions carefully. Don’t deviate from steps unless necessary.</li> <li>Always serve locally to preview website before pushing changes to remote.</li> <li>Learn about the folder and file structure. You will need to refer to the chart repeatedly.</li> <li>To ensure successful indexing, submit a sitemap to Google. The sitemap file should be located in the <code class="language-plaintext highlighter-rouge">_site</code> folder and called <code class="language-plaintext highlighter-rouge">site.xml</code>. The <code class="language-plaintext highlighter-rouge">url</code> format should be <code class="language-plaintext highlighter-rouge">&lt;your-domain&gt;.github.io/site.xml</code>.</li> <li>One annoying thing is that at the time of writing this, <a href="https://github.com/orgs/community/discussions/13761">Github Pages doesn’t seem to be compatible with <code class="language-plaintext highlighter-rouge">mermaid</code> diagrams</a>. Since I like to write all my <code class="language-plaintext highlighter-rouge">markdown</code> notes in Obsidian and tend to diagram a lot, this wasn’t ideal. However, a longer route is to use the <a href="https://mermaid.live/">Mermaid live editor</a> and download the diagram as a <code class="language-plaintext highlighter-rouge">png</code> or <code class="language-plaintext highlighter-rouge">jpg</code> file, then upload it to your repository’s image folder.</li> </ul>]]></content><author><name></name></author><category term="tutorial"/><category term="coding"/><category term="productivity"/><summary type="html"><![CDATA[Here is a bird's-eye view, advanced quick-start guide to building a sophisticated website hosted by Github Pages.]]></summary></entry><entry><title type="html">Productivity Tools</title><link href="https://ekimluo.github.io/blog/2024/productivity-tools/" rel="alternate" type="text/html" title="Productivity Tools"/><published>2024-04-13T00:00:00+00:00</published><updated>2024-04-13T00:00:00+00:00</updated><id>https://ekimluo.github.io/blog/2024/productivity-tools</id><content type="html" xml:base="https://ekimluo.github.io/blog/2024/productivity-tools/"><![CDATA[<ul> <li><a href="https://obsidian.md/">Obsidian</a>. Life-changing note-taking software. Actually wrote my PhD thesis in this, though there were some drawbacks like formatting issues (and having to tinker with CSS, not fun). Overall for thesis writing, I would say 5/10. For general note-taking, 11/10.</li> <li><a href="https://www.zotero.org/">Zotero</a>. Stay organized on your literature review!</li> <li>Google sheets. This is a no-brainer. I attach scripts to my sheets. For example, my planner uses a combination of Google functions and scripts, which allows me to calculate, predict and visualize my workload for each project. It requires some tinkering, but even for a JavaScript newbie like me, I can still cobble together something that works. Try <a href="https://docs.google.com/spreadsheets/d/1ITJjKecpX3l_cGzcWXZHVgF_RgODKm-kmM469jz0aUs/edit?usp=sharing">this spreadsheet planner</a> out if you want a reference point (it’s got a gantt chart and everything). Feel free to make a copy and tinker with the Apps Scripts!</li> <li>Visual Studio Code. Another no-brainer. Even though we usually teach programming using R Studio and Jupyter notebooks, I typically encourage students to use Visual Studio Code for their projects. It’s a bit more complicated to set up, but it’s worth it in the long run.</li> </ul>]]></content><author><name></name></author><category term="tips"/><category term="productivity"/><summary type="html"><![CDATA[Here are some tools that I use to stay productive.]]></summary></entry><entry><title type="html">A word on coding, if you’re new to it</title><link href="https://ekimluo.github.io/blog/2024/code-tips/" rel="alternate" type="text/html" title="A word on coding, if you’re new to it"/><published>2024-04-13T00:00:00+00:00</published><updated>2024-04-13T00:00:00+00:00</updated><id>https://ekimluo.github.io/blog/2024/code-tips</id><content type="html" xml:base="https://ekimluo.github.io/blog/2024/code-tips/"><![CDATA[<p>If you are just getting started with code, don’t worry about not knowing all the terminology right off the bat. However, learning some basic computer science concepts can save you a lot of time down the road. Python and R are fairly straightforward and easy to get started with because they are relatively high-level, meaning the code is more readable and understandable to humans. There is no need to learn more than one programming language in conducting statistical analysis - if you are just starting out, what’s important is that you understand statistical concepts and know the theory behind why we run the tests we run, and what the results mean. I personally think it’s much better to develop your expertise in one language rather than trying to be a generalist, given that your goal is to train in statistics and want to use programming languages as a tool to implement statistical tests and models. If your goal is to become a programmer rather than a researcher, that’s a different story. That said, it’s entirely common to learn and use multiple languages on a daily basis as a researcher. In my day-to-day, I use R, Python and bash for research-related tasks, but I also tinker with miscellaneous code in other languages to build random things that accommodate my work life while not at all being proficient in any of these languages. None of this is as impressive as it sounds. My admiration still goes to researchers who have mastered one language really well and can use whatever tools at their disposal most efficiently to execute scientific ideas.</p> <p>Finally, I will say that one great decision in my PhD is switching to Linux. Well, sometimes it was a terrible decision, like when I accidentally and permanently deleted key libraries that supported my Graphic User Interface (GUI) and I had to fix it while having no idea what I was really doing. However, my Linux skills came in handy when our lab’s stimulus computer broke down, and because it also ran on Linux, I felt comfortable diagnosing the problem and attempting to fix it without IT support, which saved me some valuable data collection time. If you don’t have a computer science background like I don’t, it is a risk, but I still highly recommend it if you are feeling adventurous and love to code. Managing research tasks, data files and computing environments is so much easier using the command line interface. And if you care about aesthetic components (because I agree that command line isn’t pretty without GUI components), you can try out other command line interfaces like Guake. Just make sure you do your research beforehand and take steps to minimize the risk of breaking your computer, like testing out a virtual Linux environment first and checking out reviews on the compatibility between your computer and various Linux distributions. Linux Mint is a starter-friendly distribution, especially if you know how to use a Macbook; you probably don’t want to start with Arch. I use the pumpkin spice variety of Ubuntu, and I think it is especially great since I’m not a computer scientist and mostly code to do small tasks.</p> <p>A lot of people use statistical analysis software like SPSS, STATA, MatLab or JASP. That’s perfectly fine. They are beginner-friendly and intuitive to use. There are many researchers in our field who strongly advocate for using open-source packages and languages, and they have exhausted in listing all the great reasons for doing so: other people can see your code and replicate what you’ve done; it advances open and transparent science; it facilitates efficient collaboration because your collaborators don’t need to sift through your lab book or procedural documentation to understand what you have done; you gain a better understanding of how all linear models are related in writing code, and you can do more advanced equations that simpler software may not be able to accommodate. I agree with all of these reasons that other researchers have listed, although I recognize that learning to code when you have no experience before can be a tough learning curve. More importantly, I think coding can be especially daunting if you come from an underrepresented background. There’s no point in pretending that learning how to code is equally accessible to everyone. I never expected that I would learn to code or even teach it at a graduate level myself. So instead of reiterating all the reasons why learning open-source languages is great, I will list the reasons why they benefit you, not just the larger scientific community:</p> <ol> <li>Anyone can learn how to code. OK, not everyone can be great at coding, and you might try it and hate it, but you might end up loving it and realize you are great at it.</li> <li>If you love having control over your research, learning to code is the way to go. You will be able to customize your research workflow and every aspect of your data pipeline.</li> <li>Coding skills are easily translatable. If you learned Python, you can easily pick up other object-oriented languages. If you know R, other functional languages can’t be too hard for you.</li> <li>This is a neat one - you can use Jupyter Notebooks and R Markdowns as a lab book. This is true whether you are an experimental or a computational scientist. You can document what you’ve done from start to finish and send your lab book to your lab mates, supervisor or collaborators so that everyone has the chance to gain a good understanding of exactly what you’ve found and how.</li> <li>If you learn how to code an experiment yourself, you don’t need to rely on admin or university license for data collection. This is somewhat specific to experimentalists, I agree, but in my PhD it has made a pretty big difference. It has saved me loads of time and allowed me to be more independent in building my experimental tasks.</li> </ol>]]></content><author><name></name></author><category term="tips"/><category term="coding"/><summary type="html"><![CDATA[Here are some of my tips on getting started as an experimental scientist, if you are new to it.]]></summary></entry></feed>